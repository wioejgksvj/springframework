<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <!--[옵션] ============================================================== -->
  <!-- 
  1) WAS가 web.xml의 listener 태그를 해석할 때 ContextLoaderListener 객체 생성
  2) ContextLoaderListener 객체는 내부에 Root WebApplicationContext 생성
  3) Root WebApplicationContext가 사용할 객체(빈)의 설정 파일의 경로를 param-value 태그에서 찾음
  -->
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <!-- Root WebApplicationContext가 사용할 객체(빈) 설정 파일 위치 -->
  <context-param>
  	<param-name>contextConfigLocation</param-name> <!-- ContextLoaderListener 안에서 사용할 변수 이름 -->
  	<!-- classpath는 WAR 파일내부의 WEB-INF/classes 폴더를 말함 -->
  	<!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
  	<param-value>classpath:spring/root/*.xml</param-value>
  	<!-- <param-value>/WEB-INF/spring/root/*.xml</param-value>  --><!-- config.xml이 parma-value 안에 경로안에 있어야 한다. -->
  </context-param>
  <!-- ================================================================== -->
  
  
  <!--[필수] ============================================================== -->
  <!-- 
  1) WAS가 web.xml의 servlet 태그를 해석할 때 DispatcherServlet 객체 생성
  2) DispatcherServlet 객체는 내부에 Root WebApplicationContext 생성
  3) WebApplicationContext가 사용할 객체(빈)의 설정 파일의 경로를 param-value 태그에서 찾음
  -->
  <servlet>
  	<servlet-name>dispatcher</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  	
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<!-- classpath는 WAR 파일내부의 WEB-INF/classes 폴더를 말함 -->
  	<!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
  	<param-value>classpath:spring/dispatcher/*.xml</param-value>
  	<!-- <param-value>/WEB-INF/spring/dispatcher/*.xml</param-value>  -->
  	</init-param>
  	<load-on-startup>1</load-on-startup> <!-- > servlet땐 꼭 넣어야 한다. 1로 설정했을때 was가 dispatcherservlet 객체 만들어준다. -->
  </servlet>
  <!-- 
  4) 브라우저(클라이언트)가 요청하는 모든 URL을 DispatcherServlet에 처리하도록 설정
  -->
  <servlet-mapping>
  	<servlet-name>dispatcher</servlet-name>
  	<url-pattern>/</url-pattern> <!-- / 앞엔 contextname이 생략되어 있다. -->
  </servlet-mapping>
  <!-- ================================================================== -->
  
  
  <!--[필수] ============================================================== -->
  <!-- 
  Filter의 역할: DispatcherServlet이 실행되기 전에 전처리하는 역할
  CharacterEncodingFilter의 역할: DispatcherServlet이 실행되기 전에 한글 데이터를 복원하는 역할
   -->
  <filter>
  <filter-name>characterEncodingFilter</filter-name> <!-- alias 객체를 참조하는 변수 이름 -->
  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  <init-param>
  	<param-name>encoding</param-name>
  	<param-value>UTF-8</param-value> 
  </init-param>  
  </filter>
  <!-- 
  브라우저(클라이언트)가 요청하는 모든 URL에 대해서 CharacterEncodingFilter가 동작하도록 실행
  --> 
  <filter-mapping>
  	<filter-name>characterEncodingFilter</filter-name>
  	<url-pattern>/*</url-pattern> 
  </filter-mapping>
  
  <!-- 로그인을 체크하는 필터 등록 -->
 <!--  <filter>
  	<filter-name>LoginCheckFilter</filter-name>
  	<filter-class>com.mycompany.springframework.filter.LoginCheckFilter</filter-class>    
  </filter>
  <filter-mapping>
	  <filter-name>LoginCheckFilter</filter-name>
	  <url-pattern>/*</url-pattern>
  </filter-mapping>
   -->

</web-app>